#ifndef PATTERN_H
#define PATTERN_H

#include "Projector.hpp"
#include <opencv2/core/core.hpp>
#include "vecmath.h"

/* 
 * Class: StaticPattern
 * A pattern class to be used for the turning on and off of static projectors,
 * most likely implemented as a grid over an LED. This pattern has no
 * information other than type, as static projectors can only create a single
 * pattern.
 */
class StaticPattern {
public:
  StaticPattern();
};

/* 
 * Class: DLPPattern
 * A pattern class to be used for the display of arbitrary patterns on DLP
 * projectors. This class contains a matrix that represents the pixel values to
 * be projected. This matrix is set at construction and used by DLP projectors
 * to create a similar projected pattern.
 *
 * Properties:
 * image - the image matrix that defines this projection
 */
class DLPPattern {
protected:
  const cv::Mat& image;
public:
  DLPPattern(const cv::Mat& img) : image(img) {};
  ~DLPPattern();
};

/*
 * Class: GeneratedPattern
 * This class represents the light field generated by a projector. It factors in
 * the distortion and calibration of the projector in its image, and takes into
 * account multiple projectors, if multiple projectors are used. It also
 * contains a reference to the projectors that created the pattern for easy
 * access later on.
 *
 * Properties:
 * image - the projected image, in matrix form
 * projectors - a vector of projectors used to create the image
 */

class GeneratedPattern {
protected:
  const cv::Mat& image;
  const vector<Projector*> projectors;
public:
  GeneratedPattern(const cv::Mat& img, const vector<Projector*> p) : image(img), projectors(p) {};
};

#endif
